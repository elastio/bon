[package]
name    = "bon-macros"
version = "2.3.0"

description = """
This is a proc-macro crate that is supposed to be a private implementation
detail of the `bon` crate
"""

edition    = "2021"
homepage   = "https://elastio.github.io/bon/"
license    = "MIT OR Apache-2.0"
repository = "https://github.com/elastio/bon"

# This MSRV was chosen because Rust supports mixing generic type and const
# parameters only starting with this version. We require this feature for the
# cases when the builder is generated for a function or struct that uses const
# generics. The generated builder **always** appends a generic type parameter
# for the type state at the end of the Builder generics list. So for functions
# or structs that use const generics the generated builder will have a generic
# type parameter after the const generic parameter, which is only supported
# starting from Rust 1.59.0.
rust-version = "1.59.0"

[package.metadata.docs.rs]
all-features = true

# Generate clickable links in the source code view in the docs
rustdoc-args = ["--generate-link-to-definition"]

# We don't need the docs to be built for every first-tier target.
# This crate is not platform-specific.
targets = ["x86_64-unknown-linux-gnu"]

[lints]
workspace = true

[lib]
proc-macro = true

[dependencies]

# Patch version 0.20.7 of darling added `flatten` feature. We use it, so we
# need to specify an explicit patch version requirement
darling = "0.20.10"

# This dependency is used by `darling` itself, so we use it as well for case
# conversions to share the same dependency.
ident_case = "1"

proc-macro2 = "1"
quote       = "1"

# This is the highest version that supports our MSRV
syn = { version = "2.0.56", features = ["full", "visit-mut", "visit"] }

prettyplease = "0.2"

[features]
default = []
# Opts in to the higher MSRV 1.79.0. In this version, Rust stabilized the syntax
# for bounds in associated type position. See the release announcement for more:
# https://blog.rust-lang.org/2024/06/13/Rust-1.79.0.htmlbounds-in-associated-type-position
#
# This feature is useful for the trait `IsComplete` generated by the builder macros.
# When this feature is enabled, the builder macros use the new syntax for bounds in
# associated type position, which enables implied `IsSet` bounds for the type state
# of required members.
#
# To understand why this is useful consider the following example:
#
# ```rust
# #[derive(bon::Builder)]
# struct Example {
#     a: u32,
#     b: Option<u32>,
# }
#
# use example_builder::{IsUnset, IsComplete};
#
# impl<State: example_builder::State> ExampleBuilder<State> {
#     fn build_with_default_b(self) -> Example
#     where
#         State: IsComplete,
#         State::B: IsUnset,
#     {
#         self.b(42).build()
#     }
# }
# ```
#
# This code wouldn't compile without this feature enabled, because `State: IsComplete`
# wouldn't automatically imply `State::A: IsSet`, so the builder type state returned
# after the `self.b()` doesn't imply that the member `a` is set, and thus `build()`
# can't be called.
msrv-1-79-0 = []

[dev-dependencies]
expect-test = "1.4.1"
