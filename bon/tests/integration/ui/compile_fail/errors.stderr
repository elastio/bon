error: duplicate key in the map
 --> tests/integration/ui/compile_fail/errors.rs:6:9
  |
6 |         "Hello": "Blackjack",
  |         ^^^^^^^

error: duplicate key in the map
 --> tests/integration/ui/compile_fail/errors.rs:7:9
  |
7 |         "Hello": "Littlepip",
  |         ^^^^^^^

error: duplicate value in the set
  --> tests/integration/ui/compile_fail/errors.rs:10:43
   |
10 |     let set: BTreeSet<String> = bon::set!["mintals", "guns", "mintals", "roses"];
   |                                           ^^^^^^^^^

error: duplicate value in the set
  --> tests/integration/ui/compile_fail/errors.rs:10:62
   |
10 |     let set: BTreeSet<String> = bon::set!["mintals", "guns", "mintals", "roses"];
   |                                                              ^^^^^^^^^

error: Only structs with named fields are supported
  --> tests/integration/ui/compile_fail/errors.rs:52:1
   |
52 | struct TupleStruct(u32, u32);
   | ^^^^^^

error: use a simple `identifier: type` syntax for the function argument; destructuring patterns in arguments aren't supported by the `#[builder]`
  --> tests/integration/ui/compile_fail/errors.rs:55:18
   |
55 | fn destructuring((x, y): (u32, u32)) {
   |                  ^^^^^^

error: Unexpected type `bool`
  --> tests/integration/ui/compile_fail/errors.rs:61:44
   |
61 | fn unnecessary_into_false(#[builder(into = false)] _x: u32) {}
   |                                            ^^^^^

error: this `#[builder(into)]` attribute is redundant, because `into` is already implied for this member via the `#[builder(on(...))]` at the top of the function
  --> tests/integration/ui/compile_fail/errors.rs:64:31
   |
64 | fn unnecessary_into(#[builder(into)] _x: String) {}
   |                               ^^^^

error: This syntax is not supported in type patterns yet. If you have a use case for this, please open an issue at https://github.com/elastio/bon/issues.
  --> tests/integration/ui/compile_fail/errors.rs:66:15
   |
66 | #[builder(on(&dyn std::fmt::Debug, into))]
   |               ^^^

error: nested attributes are not allowed in the type pattern of #[builder(on(type_pattern, ...))]
  --> tests/integration/ui/compile_fail/errors.rs:69:17
   |
69 | #[builder(on(fn(#[attr] a: u32), into))]
   |                 ^

error: Expected an attribute of form `on(type_pattern, ...)`
  --> tests/integration/ui/compile_fail/errors.rs:72:11
   |
72 | #[builder(on)]
   |           ^^

error: unexpected end of input, expected one of: `for`, parentheses, `fn`, `unsafe`, `extern`, identifier, `::`, `<`, `dyn`, square brackets, `*`, `&`, `!`, `impl`, `_`, lifetime
  --> tests/integration/ui/compile_fail/errors.rs:75:1
   |
75 | #[builder(on())]
   | ^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the attribute macro `builder` (in Nightly builds, run with -Z macro-backtrace for more info)

error: expected `,`
  --> tests/integration/ui/compile_fail/errors.rs:78:1
   |
78 | #[builder(on(_))]
   | ^^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the attribute macro `builder` (in Nightly builds, run with -Z macro-backtrace for more info)

error: this #[builder(on(type_pattern, ...))] contains no options to override the default behavior for the selected setters like `into`, so it does nothing
  --> tests/integration/ui/compile_fail/errors.rs:81:1
   |
81 | #[builder(on(_,))]
   | ^^^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the attribute macro `builder` (in Nightly builds, run with -Z macro-backtrace for more info)

error: expected at least one parameter in parentheses
  --> tests/integration/ui/compile_fail/errors.rs:85:11
   |
85 | #[builder(start_fn())]
   |           ^^^^^^^^

error: `skip` attribute can't be specified together with `into`
  --> tests/integration/ui/compile_fail/errors.rs:90:15
   |
90 |     #[builder(skip, into)]
   |               ^^^^

error: `skip` attribute can't be specified together with `name`
  --> tests/integration/ui/compile_fail/errors.rs:96:15
   |
96 |     #[builder(skip, name = bar)]
   |               ^^^^

error: `skip` attribute can't be specified with `default` attribute; if you wanted to specify a value for the member, then use the following syntax instead `#[builder(skip = value)]`
   --> tests/integration/ui/compile_fail/errors.rs:102:15
    |
102 |     #[builder(skip, default = 42)]
    |               ^^^^

error: `skip` attribute is not supported on function arguments. Use a local variable instead.
   --> tests/integration/ui/compile_fail/errors.rs:108:15
    |
108 |     #[builder(skip)] _x: u32,
    |               ^^^^

error: Only structs with named fields are supported
   --> tests/integration/ui/compile_fail/errors.rs:115:1
    |
115 | struct TupleStructsAreUnsupported(u32, u32);
    | ^^^^^^

error: only `fn` items are supported by the `#[bon::builder]` attribute
   --> tests/integration/ui/compile_fail/errors.rs:117:1
    |
117 | #[builder]
    | ^^^^^^^^^^
    |
    = note: this error originates in the attribute macro `builder` (in Nightly builds, run with -Z macro-backtrace for more info)

error: only `struct` items are supported by the `#[derive(bon::Builder)]` attribute
   --> tests/integration/ui/compile_fail/errors.rs:120:10
    |
120 | #[derive(Builder)]
    |          ^^^^^^^
    |
    = note: this error originates in the derive macro `Builder` (in Nightly builds, run with -Z macro-backtrace for more info)

error: use a simple `identifier: type` syntax for the function argument; destructuring patterns in arguments aren't supported by the `#[builder]`
   --> tests/integration/ui/compile_fail/errors.rs:124:39
    |
124 | fn destructuring_in_fn_is_unsupported((_, _): (u32, u32)) {}
    |                                       ^^^^^^

error: Found multiple #[must_use], but bon only works with exactly one (or less).
   --> tests/integration/ui/compile_fail/errors.rs:128:1
    |
128 | #[must_use]
    | ^

warning: unused attribute
   --> tests/integration/ui/compile_fail/errors.rs:128:1
    |
128 | #[must_use]
    | ^^^^^^^^^^^ help: remove this attribute
    |
note: attribute also specified here
   --> tests/integration/ui/compile_fail/errors.rs:127:1
    |
127 | #[must_use]
    | ^^^^^^^^^^^
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: `#[warn(unused_attributes)]` on by default

warning: use of deprecated module `bon::private::deprecations::builder_attribute_on_a_struct`: #[bon::builder] on top of a struct is deprecated; use `#[derive(bon::Builder)]` instead; see more details at https://elastio.github.io/bon/blog/bon-builder-v2-2-release#derive-builder-syntax-for-structs
   --> tests/integration/ui/compile_fail/errors.rs:131:1
    |
131 | #[builder]
    | ^^^^^^^^^^
    |
    = note: `#[warn(deprecated)]` on by default
    = note: this warning originates in the attribute macro `builder` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no method named `x` found for struct `SkipGeneratesNoSetterBuilder` in the current scope
  --> tests/integration/ui/compile_fail/errors.rs:21:38
   |
12 |     #[derive(Builder)]
   |              ------- method `x` not found for this struct
...
21 |     SkipGeneratesNoSetter::builder().x(42).build();
   |                                      ^ method not found in `SkipGeneratesNoSetterBuilder`

error[E0599]: no method named `y` found for struct `SkipGeneratesNoSetterBuilder` in the current scope
  --> tests/integration/ui/compile_fail/errors.rs:22:38
   |
12 |     #[derive(Builder)]
   |              ------- method `y` not found for this struct
...
22 |     SkipGeneratesNoSetter::builder().y(42).build();
   |                                      ^ method not found in `SkipGeneratesNoSetterBuilder`

error[E0277]: can't finish building yet; the member `ExampleBuilder__y` was not set
  --> tests/integration/ui/compile_fail/errors.rs:34:37
   |
34 |     let _ = Example::builder().x(1).build();
   |                                     ^^^^^ the member `ExampleBuilder__y` was not set
   |
   = help: the trait `IntoSet<u32, ExampleBuilder__y>` is not implemented for `Unset<Required>`
   = help: the trait `IntoSet<Option<_>, ExampleBuilder__y>` is implemented for `Unset<Optional>`
note: required by a bound in `ExampleBuilder::<(__X, __Y, __Z)>::build`
  --> tests/integration/ui/compile_fail/errors.rs:24:14
   |
24 |     #[derive(Builder)]
   |              ^^^^^^^ required by this bound in `ExampleBuilder::<(__X, __Y, __Z)>::build`
25 |     struct Example {
   |            ------- required by a bound in this associated function
   = note: this error originates in the derive macro `Builder` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: can't finish building yet; the member `ExampleBuilder__renamed` was not set
  --> tests/integration/ui/compile_fail/errors.rs:34:37
   |
34 |     let _ = Example::builder().x(1).build();
   |                                     ^^^^^ the member `ExampleBuilder__renamed` was not set
   |
   = help: the trait `IntoSet<u32, ExampleBuilder__renamed>` is not implemented for `Unset<Required>`
   = help: the trait `IntoSet<Option<_>, ExampleBuilder__renamed>` is implemented for `Unset<Optional>`
note: required by a bound in `ExampleBuilder::<(__X, __Y, __Z)>::build`
  --> tests/integration/ui/compile_fail/errors.rs:24:14
   |
24 |     #[derive(Builder)]
   |              ^^^^^^^ required by this bound in `ExampleBuilder::<(__X, __Y, __Z)>::build`
25 |     struct Example {
   |            ------- required by a bound in this associated function
   = note: this error originates in the derive macro `Builder` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: can't set the same member twice
  --> tests/integration/ui/compile_fail/errors.rs:37:37
   |
37 |     let _ = Example::builder().y(1).y(2);
   |                                     ^ this member was already set
   |
   = help: the trait `IsUnset` is not implemented for `Set<u32>`
   = help: the trait `IsUnset` is implemented for `Unset<T>`
note: required by a bound in `ExampleBuilder::<(__X, __Y, __Z)>::y`
  --> tests/integration/ui/compile_fail/errors.rs:24:14
   |
24 |     #[derive(Builder)]
   |              ^^^^^^^ required by this bound in `ExampleBuilder::<(__X, __Y, __Z)>::y`
...
27 |         y: u32,
   |         - required by a bound in this associated function
   = note: this error originates in the derive macro `Builder` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: can't finish building yet; the member `SutBuilder__arg1` was not set
  --> tests/integration/ui/compile_fail/errors.rs:47:32
   |
47 |         let _ = Sut::builder().build();
   |                                ^^^^^ the member `SutBuilder__arg1` was not set
   |
   = help: the trait `IntoSet<Option<u32>, SutBuilder__arg1>` is not implemented for `Unset<Required>`
   = help: the trait `IntoSet<Option<u32>, SutBuilder__arg1>` is implemented for `Unset<Optional>`
   = help: for that trait implementation, expected `Optional`, found `Required`
note: required by a bound in `SutBuilder::<(__Arg1,)>::build`
  --> tests/integration/ui/compile_fail/errors.rs:42:18
   |
42 |         #[derive(Builder)]
   |                  ^^^^^^^ required by this bound in `SutBuilder::<(__Arg1,)>::build`
43 |         struct Sut {
   |                --- required by a bound in this associated function
   = note: this error originates in the derive macro `Builder` (in Nightly builds, run with -Z macro-backtrace for more info)
