error: duplicate key in the map
 --> tests/integration/ui/compile_fail/errors.rs:6:9
  |
6 |         "Hello": "Blackjack",
  |         ^^^^^^^

error: duplicate key in the map
 --> tests/integration/ui/compile_fail/errors.rs:7:9
  |
7 |         "Hello": "Littlepip",
  |         ^^^^^^^

error: duplicate value in the set
  --> tests/integration/ui/compile_fail/errors.rs:10:43
   |
10 |     let set: BTreeSet<String> = bon::set!["mintals", "guns", "mintals", "roses"];
   |                                           ^^^^^^^^^

error: duplicate value in the set
  --> tests/integration/ui/compile_fail/errors.rs:10:62
   |
10 |     let set: BTreeSet<String> = bon::set!["mintals", "guns", "mintals", "roses"];
   |                                                              ^^^^^^^^^

error: Only structs with named fields are supported
  --> tests/integration/ui/compile_fail/errors.rs:68:1
   |
68 | struct TupleStruct(u32, u32);
   | ^^^^^^

error: use a simple `identifier: type` syntax for the function argument; destructuring patterns in arguments aren't supported by the `#[builder]`
  --> tests/integration/ui/compile_fail/errors.rs:71:18
   |
71 | fn destructuring((x, y): (u32, u32)) {
   |                  ^^^^^^

error: Unexpected type `bool`
  --> tests/integration/ui/compile_fail/errors.rs:77:44
   |
77 | fn unnecessary_into_false(#[builder(into = false)] _x: u32) {}
   |                                            ^^^^^

error: this `#[builder(into)]` attribute is redundant, because `into` is already implied for this member via the `#[builder(on(...))]` at the top of the function
  --> tests/integration/ui/compile_fail/errors.rs:80:31
   |
80 | fn unnecessary_into(#[builder(into)] _x: String) {}
   |                               ^^^^

error: This syntax is not supported in type patterns yet. If you have a use case for this, please open an issue at https://github.com/elastio/bon/issues.
  --> tests/integration/ui/compile_fail/errors.rs:82:15
   |
82 | #[builder(on(&dyn std::fmt::Debug, into))]
   |               ^^^

error: nested attributes are not allowed in the type pattern of #[builder(on(type_pattern, ...))]
  --> tests/integration/ui/compile_fail/errors.rs:85:17
   |
85 | #[builder(on(fn(#[attr] a: u32), into))]
   |                 ^

error: Expected an attribute of form `on(type_pattern, ...)`
  --> tests/integration/ui/compile_fail/errors.rs:88:11
   |
88 | #[builder(on)]
   |           ^^

error: unexpected end of input, expected one of: `for`, parentheses, `fn`, `unsafe`, `extern`, identifier, `::`, `<`, `dyn`, square brackets, `*`, `&`, `!`, `impl`, `_`, lifetime
  --> tests/integration/ui/compile_fail/errors.rs:91:1
   |
91 | #[builder(on())]
   | ^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the attribute macro `builder` (in Nightly builds, run with -Z macro-backtrace for more info)

error: expected `,`
  --> tests/integration/ui/compile_fail/errors.rs:94:1
   |
94 | #[builder(on(_))]
   | ^^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the attribute macro `builder` (in Nightly builds, run with -Z macro-backtrace for more info)

error: this #[builder(on(type_pattern, ...))] contains no options to override the default behavior for the selected setters like `into`, so it does nothing
  --> tests/integration/ui/compile_fail/errors.rs:97:1
   |
97 | #[builder(on(_,))]
   | ^^^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the attribute macro `builder` (in Nightly builds, run with -Z macro-backtrace for more info)

error: expected at least one parameter in parentheses
   --> tests/integration/ui/compile_fail/errors.rs:101:11
    |
101 | #[builder(start_fn())]
    |           ^^^^^^^^

error: `skip` attribute can't be specified with other attributes like `into` because there will be no setter generated for this member to configure
   --> tests/integration/ui/compile_fail/errors.rs:106:21
    |
106 |     #[builder(skip, into)]
    |                     ^^^^

error: `skip` attribute can't be specified with other attributes like `name` because there will be no setter generated for this member to configure
   --> tests/integration/ui/compile_fail/errors.rs:112:28
    |
112 |     #[builder(skip, name = bar)]
    |                            ^^^

error: `skip` attribute can't be specified with other attributes like `default` because there will be no setter generated for this member to configure. If you wanted to specify a value for the member, then use the following syntax instead `#[builder(skip = value)]`
   --> tests/integration/ui/compile_fail/errors.rs:118:21
    |
118 |     #[builder(skip, default = 42)]
    |                     ^^^^^^^

error: `skip` attribute is not supported on function arguments. Use a local variable instead.
   --> tests/integration/ui/compile_fail/errors.rs:124:15
    |
124 |     #[builder(skip)] _x: u32,
    |               ^^^^

error: Only structs with named fields are supported
   --> tests/integration/ui/compile_fail/errors.rs:131:1
    |
131 | struct TupleStructsAreUnsupported(u32, u32);
    | ^^^^^^

error: only `fn` items are supported by the `#[bon::builder]` attribute
   --> tests/integration/ui/compile_fail/errors.rs:133:1
    |
133 | #[builder]
    | ^^^^^^^^^^
    |
    = note: this error originates in the attribute macro `builder` (in Nightly builds, run with -Z macro-backtrace for more info)

error: only `struct` items are supported by the `#[derive(bon::Builder)]` attribute
   --> tests/integration/ui/compile_fail/errors.rs:136:10
    |
136 | #[derive(Builder)]
    |          ^^^^^^^
    |
    = note: this error originates in the derive macro `Builder` (in Nightly builds, run with -Z macro-backtrace for more info)

error: use a simple `identifier: type` syntax for the function argument; destructuring patterns in arguments aren't supported by the `#[builder]`
   --> tests/integration/ui/compile_fail/errors.rs:140:39
    |
140 | fn destructuring_in_fn_is_unsupported((_, _): (u32, u32)) {}
    |                                       ^^^^^^

error: Found multiple #[must_use], but bon only works with exactly one (or less).
   --> tests/integration/ui/compile_fail/errors.rs:144:1
    |
144 | #[must_use]
    | ^

warning: unused attribute
   --> tests/integration/ui/compile_fail/errors.rs:144:1
    |
144 | #[must_use]
    | ^^^^^^^^^^^ help: remove this attribute
    |
note: attribute also specified here
   --> tests/integration/ui/compile_fail/errors.rs:143:1
    |
143 | #[must_use]
    | ^^^^^^^^^^^
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: `#[warn(unused_attributes)]` on by default

error[E0599]: no method named `x` found for struct `SkipGeneratesNoSetterBuilder` in the current scope
  --> tests/integration/ui/compile_fail/errors.rs:21:38
   |
12 |     #[derive(Builder)]
   |              ------- method `x` not found for this struct
...
21 |     SkipGeneratesNoSetter::builder().x(42).build();
   |                                      ^ method not found in `SkipGeneratesNoSetterBuilder`

error[E0599]: no method named `y` found for struct `SkipGeneratesNoSetterBuilder` in the current scope
  --> tests/integration/ui/compile_fail/errors.rs:22:38
   |
12 |     #[derive(Builder)]
   |              ------- method `y` not found for this struct
...
22 |     SkipGeneratesNoSetter::builder().y(42).build();
   |                                      ^ method not found in `SkipGeneratesNoSetterBuilder`

error[E0277]: can't finish building yet; the member `ExampleBuilder__y` was not set
  --> tests/integration/ui/compile_fail/errors.rs:34:37
   |
34 |     let _ = Example::builder().x(1).build();
   |                                     ^^^^^ the member `ExampleBuilder__y` was not set
   |
   = help: the trait `IntoSet<u32, ExampleBuilder__y>` is not implemented for `Unset<Required>`
   = help: the trait `IntoSet<Option<_>, ExampleBuilder__y>` is implemented for `Unset<Optional>`
note: required by a bound in `ExampleBuilder::<(__X, __Y, __Z)>::build`
  --> tests/integration/ui/compile_fail/errors.rs:24:14
   |
24 |     #[derive(Builder)]
   |              ^^^^^^^ required by this bound in `ExampleBuilder::<(__X, __Y, __Z)>::build`
25 |     struct Example {
   |            ------- required by a bound in this associated function
   = note: this error originates in the derive macro `Builder` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: can't finish building yet; the member `ExampleBuilder__renamed` was not set
  --> tests/integration/ui/compile_fail/errors.rs:34:37
   |
34 |     let _ = Example::builder().x(1).build();
   |                                     ^^^^^ the member `ExampleBuilder__renamed` was not set
   |
   = help: the trait `IntoSet<u32, ExampleBuilder__renamed>` is not implemented for `Unset<Required>`
   = help: the trait `IntoSet<Option<_>, ExampleBuilder__renamed>` is implemented for `Unset<Optional>`
note: required by a bound in `ExampleBuilder::<(__X, __Y, __Z)>::build`
  --> tests/integration/ui/compile_fail/errors.rs:24:14
   |
24 |     #[derive(Builder)]
   |              ^^^^^^^ required by this bound in `ExampleBuilder::<(__X, __Y, __Z)>::build`
25 |     struct Example {
   |            ------- required by a bound in this associated function
   = note: this error originates in the derive macro `Builder` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: can't set the same member twice
  --> tests/integration/ui/compile_fail/errors.rs:37:37
   |
37 |     let _ = Example::builder().y(1).y(2);
   |                                     ^ this member was already set
   |
   = help: the trait `IsUnset` is not implemented for `Set<u32>`
   = help: the trait `IsUnset` is implemented for `Unset<T>`
note: required by a bound in `ExampleBuilder::<(__X, __Y, __Z)>::y`
  --> tests/integration/ui/compile_fail/errors.rs:24:14
   |
24 |     #[derive(Builder)]
   |              ^^^^^^^ required by this bound in `ExampleBuilder::<(__X, __Y, __Z)>::y`
...
27 |         y: u32,
   |         - required by a bound in this associated function
   = note: this error originates in the derive macro `Builder` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: can't finish building yet; the member `SutBuilder__arg1` was not set
  --> tests/integration/ui/compile_fail/errors.rs:47:32
   |
47 |         let _ = Sut::builder().build();
   |                                ^^^^^ the member `SutBuilder__arg1` was not set
   |
   = help: the trait `IntoSet<Option<u32>, SutBuilder__arg1>` is not implemented for `Unset<Required>`
   = help: the trait `IntoSet<Option<u32>, SutBuilder__arg1>` is implemented for `Unset<Optional>`
   = help: for that trait implementation, expected `Optional`, found `Required`
note: required by a bound in `main::SutBuilder::<(__Arg1,)>::build`
  --> tests/integration/ui/compile_fail/errors.rs:42:18
   |
42 |         #[derive(Builder)]
   |                  ^^^^^^^ required by this bound in `SutBuilder::<(__Arg1,)>::build`
43 |         struct Sut {
   |                --- required by a bound in this associated function
   = note: this error originates in the derive macro `Builder` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no method named `get_c` found for struct `main::SutBuilder` in the current scope
  --> tests/integration/ui/compile_fail/errors.rs:62:13
   |
51 |         #[derive(bon::Builder)]
   |                  ------------ method `get_c` not found for this struct
...
62 |         sut.get_c();
   |             ^^^^^
   |
help: there is a method `get_a` with a similar name
   |
62 |         sut.get_a();
   |             ~~~~~

error[E0277]: can't get value reference yet; the member `SutBuilder__a` was not set
  --> tests/integration/ui/compile_fail/errors.rs:63:13
   |
63 |         sut.get_a();
   |             ^^^^^ the member `SutBuilder__a` was not set
   |
   = help: the trait `IsSet<i32, SutBuilder__a>` is not implemented for `Unset<Required>`
   = help: the trait `IsSet<T, Member>` is implemented for `Set<T>`
note: required by a bound in `main::SutBuilder::<(__A, __B, __C, __D)>::get_a`
  --> tests/integration/ui/compile_fail/errors.rs:51:18
   |
51 |         #[derive(bon::Builder)]
   |                  ^^^^^^^^^^^^ required by this bound in `SutBuilder::<(__A, __B, __C, __D)>::get_a`
...
54 |             a: i32,
   |             - required by a bound in this associated function
   = note: this error originates in the derive macro `bon::Builder` (in Nightly builds, run with -Z macro-backtrace for more info)
