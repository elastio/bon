error: Only structs with named fields are supported
 --> tests/integration/ui/compile_fail/misc.rs:5:1
  |
5 | struct TupleStruct(u32, u32);
  | ^^^^^^

error: can't infer the name to use for this function argument; please use a simple `identifier: type` syntax for the function argument, or add `#[builder(name = explicit_name)]` to specify the name explicitly
 --> tests/integration/ui/compile_fail/misc.rs:8:26
  |
8 | fn destructuring((x, y): (u32, u32)) {
  |                          ^^^^^^^^^^

error: No need to write `= true`. Just mentioning the attribute is enough to set it to `true`, so remove the `= true` part.
  --> tests/integration/ui/compile_fail/misc.rs:14:47
   |
14 | fn explicit_into_equals_true(#[builder(into = true)] _x: u32) {}
   |                                               ^^^^

error: This attribute is redundant and can be removed. By default the the type of this function argument already qualifies for `impl Into`.
  --> tests/integration/ui/compile_fail/misc.rs:17:45
   |
17 | fn unnecessary_into_override_true(#[builder(into)] _x: String) {}
   |                                             ^^^^

error: This attribute is redundant and can be removed. By default the the type of this function argument already doesn't qualify for `impl Into`.
  --> tests/integration/ui/compile_fail/misc.rs:20:53
   |
20 | fn unnecessary_into_override_false(#[builder(into = false)] _x: u32) {}
   |                                                     ^^^^^

error: expected at least one parameter in parentheses
  --> tests/integration/ui/compile_fail/misc.rs:22:11
   |
22 | #[builder(start_fn())]
   |           ^^^^^^^^

error: duplicate key in the map
  --> tests/integration/ui/compile_fail/misc.rs:27:9
   |
27 |         "Hello": "Blackjack",
   |         ^^^^^^^

error: duplicate key in the map
  --> tests/integration/ui/compile_fail/misc.rs:28:9
   |
28 |         "Hello": "Littlepip",
   |         ^^^^^^^

error: duplicate value in the set
  --> tests/integration/ui/compile_fail/misc.rs:31:43
   |
31 |     let set: BTreeSet<String> = bon::set!["mintals", "guns", "mintals", "roses"];
   |                                           ^^^^^^^^^

error: duplicate value in the set
  --> tests/integration/ui/compile_fail/misc.rs:31:62
   |
31 |     let set: BTreeSet<String> = bon::set!["mintals", "guns", "mintals", "roses"];
   |                                                              ^^^^^^^^^
