error: Only structs with named fields are supported
 --> tests/integration/ui/compile_fail/misc.rs:5:1
  |
5 | struct TupleStruct(u32, u32);
  | ^^^^^^

error: can't infer the name to use for this function argument; please use a simple `identifier: type` syntax for the function argument, or add `#[builder(name = explicit_name)]` to specify the name explicitly
 --> tests/integration/ui/compile_fail/misc.rs:8:26
  |
8 | fn destructuring((x, y): (u32, u32)) {
  |                          ^^^^^^^^^^

error: Unexpected type `bool`
  --> tests/integration/ui/compile_fail/misc.rs:14:44
   |
14 | fn unnecessary_into_false(#[builder(into = false)] _x: u32) {}
   |                                            ^^^^^

error: nested attributes are not allowed in the type pattern of #[builder(on(type_pattern, ...))]
  --> tests/integration/ui/compile_fail/misc.rs:16:17
   |
16 | #[builder(on(fn(#[attr] a: u32), into))]
   |                 ^

error: Expected an attribute of form `on(type_pattern, ...)`
  --> tests/integration/ui/compile_fail/misc.rs:19:11
   |
19 | #[builder(on)]
   |           ^^

error: unexpected end of input, expected one of: `for`, parentheses, `fn`, `unsafe`, `extern`, identifier, `::`, `<`, `dyn`, square brackets, `*`, `&`, `!`, `impl`, `_`, lifetime
  --> tests/integration/ui/compile_fail/misc.rs:22:1
   |
22 | #[builder(on())]
   | ^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the attribute macro `builder` (in Nightly builds, run with -Z macro-backtrace for more info)

error: expected `,`
  --> tests/integration/ui/compile_fail/misc.rs:25:1
   |
25 | #[builder(on(_))]
   | ^^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the attribute macro `builder` (in Nightly builds, run with -Z macro-backtrace for more info)

error: this #[builder(on(type_pattern, ...))] contains no options to override the default behavior for the selected setters like `into`, so it does nothing
  --> tests/integration/ui/compile_fail/misc.rs:28:1
   |
28 | #[builder(on(_, ))]
   | ^^^^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the attribute macro `builder` (in Nightly builds, run with -Z macro-backtrace for more info)

error: expected at least one parameter in parentheses
  --> tests/integration/ui/compile_fail/misc.rs:31:11
   |
31 | #[builder(start_fn())]
   |           ^^^^^^^^

error: `skip` attribute can't be specified with other attributes like `into` because there will be no setter generated for this member to configure
  --> tests/integration/ui/compile_fail/misc.rs:36:21
   |
36 |     #[builder(skip, into)]
   |                     ^^^^

error: `skip` attribute can't be specified with other attributes like `name` because there will be no setter generated for this member to configure
  --> tests/integration/ui/compile_fail/misc.rs:42:28
   |
42 |     #[builder(skip, name = bar)]
   |                            ^^^

error: `skip` attribute can't be specified with other attributes like `default` because there will be no setter generated for this member to configure. If you wanted to specify a value for the member, then use the following syntax instead `#[builder(skip = value)]`
  --> tests/integration/ui/compile_fail/misc.rs:48:21
   |
48 |     #[builder(skip, default = 42)]
   |                     ^^^^^^^

error: duplicate key in the map
  --> tests/integration/ui/compile_fail/misc.rs:54:9
   |
54 |         "Hello": "Blackjack",
   |         ^^^^^^^

error: duplicate key in the map
  --> tests/integration/ui/compile_fail/misc.rs:55:9
   |
55 |         "Hello": "Littlepip",
   |         ^^^^^^^

error: duplicate value in the set
  --> tests/integration/ui/compile_fail/misc.rs:58:43
   |
58 |     let set: BTreeSet<String> = bon::set!["mintals", "guns", "mintals", "roses"];
   |                                           ^^^^^^^^^

error: duplicate value in the set
  --> tests/integration/ui/compile_fail/misc.rs:58:62
   |
58 |     let set: BTreeSet<String> = bon::set!["mintals", "guns", "mintals", "roses"];
   |                                                              ^^^^^^^^^
