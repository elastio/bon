error: `#[builder(derive(IntoFuture(...)))` can only be used with async functions; using it with a synchronous function is likely a mistake
 --> tests/integration/ui/compile_fail/attr_into_future.rs:5:1
  |
5 | #[bon::builder]
  | ^^^^^^^^^^^^^^^
  |
  = note: this error originates in the attribute macro `bon::builder` (in Nightly builds, run with -Z macro-backtrace for more info)

error: `#[builder(derive(IntoFuture(...)))` is not supported for unsafe functions because `IntoFuture::into_future()` method is a safe method
  --> tests/integration/ui/compile_fail/attr_into_future.rs:14:7
   |
14 | async unsafe fn unsafe_async_function() -> u32 {
   |       ^^^^^^

error: `#[builder(derive(IntoFuture(...)))` is incompatible with `#[builder(finish_fn)]` members because `IntoFuture::into_future()` method accepts zero parameters
  --> tests/integration/ui/compile_fail/attr_into_future.rs:21:35
   |
21 | async fn with_finish_fn(#[builder(finish_fn)] value: u32) -> u32 {
   |                                   ^^^^^^^^^

error: expected an attribute of form `IntoFuture(Box, ...)`
  --> tests/integration/ui/compile_fail/attr_into_future.rs:27:18
   |
27 | #[builder(derive(IntoFuture))]
   |                  ^^^^^^^^^^

error: expected `Box` as the first argument, only boxed futures are supported
  --> tests/integration/ui/compile_fail/attr_into_future.rs:34:29
   |
34 | #[builder(derive(IntoFuture(Arc)))]
   |                             ^^^

error: expected `?Send` as the second argument
  --> tests/integration/ui/compile_fail/attr_into_future.rs:41:34
   |
41 | #[builder(derive(IntoFuture(Box, Send)))]
   |                                  ^^^^

error: `#[builder(derive(IntoFuture(...)))` can only be used with async functions; using it with a synchronous function is likely a mistake
  --> tests/integration/ui/compile_fail/attr_into_future.rs:49:8
   |
49 | struct AsyncConfig {
   |        ^^^^^^^^^^^

error[E0277]: `dyn Future<Output = u32>` cannot be sent between threads safely
  --> tests/integration/ui/compile_fail/attr_into_future.rs:66:17
   |
66 |     assert_send(&Sut.sut().value(21).into_future());
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `dyn Future<Output = u32>` cannot be sent between threads safely
   |
   = help: the trait `Send` is not implemented for `dyn Future<Output = u32>`
   = note: required for `Unique<dyn Future<Output = u32>>` to implement `Send`
note: required because it appears within the type `Box<dyn Future<Output = u32>>`
  --> $RUST/alloc/src/boxed.rs
   |
   | pub struct Box<
   |            ^^^
note: required because it appears within the type `Pin<Box<dyn Future<Output = u32>>>`
  --> $RUST/core/src/pin.rs
   |
   | pub struct Pin<Ptr> {
   |            ^^^
   = note: required for the cast from `&Pin<Box<dyn Future<Output = u32>>>` to `&dyn Send`

error[E0277]: `(dyn Future<Output = u32> + 'static)` cannot be sent between threads safely
  --> tests/integration/ui/compile_fail/attr_into_future.rs:73:17
   |
73 |     assert_send(&sut().value(21).into_future());
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Future<Output = u32> + 'static)` cannot be sent between threads safely
   |
   = help: the trait `Send` is not implemented for `(dyn Future<Output = u32> + 'static)`
   = note: required for `Unique<(dyn Future<Output = u32> + 'static)>` to implement `Send`
note: required because it appears within the type `Box<(dyn Future<Output = u32> + 'static)>`
  --> $RUST/alloc/src/boxed.rs
   |
   | pub struct Box<
   |            ^^^
note: required because it appears within the type `Pin<Box<(dyn Future<Output = u32> + 'static)>>`
  --> $RUST/core/src/pin.rs
   |
   | pub struct Pin<Ptr> {
   |            ^^^
   = note: required for the cast from `&Pin<Box<(dyn Future<Output = u32> + 'static)>>` to `&dyn Send`
